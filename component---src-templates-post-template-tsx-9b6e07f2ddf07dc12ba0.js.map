{"version":3,"file":"component---src-templates-post-template-tsx-9b6e07f2ddf07dc12ba0.js","mappings":"mNA2CA,MA5ByC,WACvC,MAAMA,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,KACR,GAAwB,OAApBF,EAAQG,QAAkB,OAE9B,MAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAsC,CAC1CC,IAtBM,gCAuBNC,KAtBO,wBAuBP,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQC,IAAmB,IAAjBC,EAAKC,GAAM,EAC9Cf,EAAWgB,aAAaF,EAAKC,EAAM,IAGrCnB,EAAQG,QAAQkB,YAAYjB,EAAW,GACtC,KAEIkB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,IAAKvB,GACnB,E,UClCA,MAAMwB,GAAgB,8yBA6FtB,MAJyD,YAAqB,IAAX,KAAEC,GAAM,EACzE,OAAOH,EAAAA,EAAAA,IAACE,EAAgB,CAACE,wBAAyB,CAAEC,OAAQF,IAC9D,E,uCCvFA,MAAMG,GAAmB,oKAUnBC,GAAY,kPAaZC,GAAK,qQAaLC,GAAQ,0KA8Bd,MArB2D,YAIvD,IAJiE,MACnEC,EAAK,KACLC,EAAI,WACJC,GACD,EAGC,OACEZ,EAAAA,EAAAA,IAACM,EAAmB,MAClBN,EAAAA,EAAAA,IAACO,EAAY,CAACM,QAJC,IAAMC,OAAOC,QAAQC,SAKlChB,EAAAA,EAAAA,IAACiB,EAAAA,EAAe,CAACC,KAAMC,EAAAA,QAEzBnB,EAAAA,EAAAA,IAACQ,EAAK,KAAEE,IACRV,EAAAA,EAAAA,IAACS,EAAQ,MACPT,EAAAA,EAAAA,IAAAA,MAAAA,KAAMY,EAAWQ,KAAK,SACtBpB,EAAAA,EAAAA,IAAAA,MAAAA,KAAMW,IAId,EC5DA,MAAMU,GAAe,wGAMfC,GAAkBC,EAAAA,EAAAA,IAAQC,IAC9BxB,EAAAA,EAAAA,IAACyB,EAAAA,GAAW,UAAKD,EAAK,CAAEE,MAAO,CAAEC,SAAU,gBAC5C,qBAFuBJ,CAEtB,sGAsBF,MAdmD,YAK/C,IALyD,MAC3Db,EAAK,KACLC,EAAI,WACJC,EAAU,UACVgB,GACD,EACC,OACE5B,EAAAA,EAAAA,IAACqB,EAAe,MACdrB,EAAAA,EAAAA,IAACsB,EAAe,CAACO,MAAOD,EAAWE,IAAI,eACvC9B,EAAAA,EAAAA,IAAC+B,EAAY,CAACrB,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,IAG1D,ECcA,MAtC2D,SAAU,GAKlE,IAJDoB,MACEC,mBAAmB,MAAEC,IAEvBC,UAAU,KAAEC,IACb,EACC,MACEC,MAAM,KACJlC,EACAmC,aAAa,MACX5B,EAAK,QACL6B,EAAO,KACP5B,EAAI,WACJC,EACAgB,WACEY,WACEC,iBAAiB,gBAAEC,GAAiB,UACpCF,OAKNN,EAAM,GAEV,OACElC,EAAAA,EAAAA,IAAC2C,EAAAA,EAAQ,CAACjC,MAAOA,EAAOkC,YAAaL,EAASM,IAAKT,EAAMP,MAAOW,IAC9DxC,EAAAA,EAAAA,IAAC8C,EAAQ,CACPpC,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZgB,UAAWc,KAEb1C,EAAAA,EAAAA,IAAC+C,EAAW,CAAC5C,KAAMA,KACnBH,EAAAA,EAAAA,IAACgD,EAAa,MAGpB,C","sources":["webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent, createRef, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'boxak/boxak.github.io'\r\n\r\ntype UtteranceAttributesType = {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: UtteranceAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: 'github-light',\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <div ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","import styled from '@emotion/styled'\r\nimport React, { FunctionComponent } from 'react'\r\n\r\ninterface PostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Render Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  pre[class*='language'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      background-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n`\r\n\r\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent\r\n","import styled from '@emotion/styled'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { FunctionComponent } from 'react'\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  padding: 60px 0;\r\n  color: #ffffff;\r\n`\r\n\r\nconst PrevPageIcon = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #ffffff;\r\n  color: #000000;\r\n  font-size: 22px;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 45px;\r\n  font-weight: 800;\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n}) {\r\n  const goBackPage = () => window.history.back()\r\n\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <PrevPageIcon onClick={goBackPage}>\r\n        <FontAwesomeIcon icon={faArrowLeft} />\r\n      </PrevPageIcon>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <div>{categories.join(' / ')}</div>\r\n        <div>{date}</div>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n","import styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport React, { FunctionComponent } from 'react'\r\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\r\n\r\ntype GatsbyImage = {\r\n  image: IGatsbyImageData\r\n  alt: string\r\n  className?: string\r\n}\r\n\r\ntype PostHeadProps = PostHeadInfoProps & {\r\n  thumbnail: IGatsbyImageData\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n`\r\n\r\nconst BackgroundImage = styled((props: GatsbyImage) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 400px;\r\n  object-fit: cover;\r\n  filter: brightness(0.25);\r\n`\r\n\r\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  thumbnail,\r\n}) {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n","import Template from 'components/Common/Template'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\nimport PostContent from 'components/Post/PostContent'\r\nimport PostHead from 'components/Post/PostHead'\r\nimport { graphql } from 'gatsby'\r\nimport React, { FunctionComponent } from 'react'\r\nimport { PostPageItemType } from 'types/PostItem.types'\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}) {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          publicURL: {\r\n            childImageSharp: { gatsbyImageData },\r\n            publicURL,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <CommentWidget />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              publicURL {\r\n                childImageSharp {\r\n                  gatsbyImageData\r\n                }\r\n                publicURL\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","_ref","key","value","setAttribute","appendChild","___EmotionJSX","ref","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","PostHeadInfoWrapper","PrevPageIcon","Title","PostData","title","date","categories","onClick","window","history","back","FontAwesomeIcon","icon","faArrowLeft","join","PostHeadWrapper","BackgroundImage","_styled","props","GatsbyImage","style","position","thumbnail","image","alt","PostHeadInfo","data","allMarkdownRemark","edges","location","href","node","frontmatter","summary","publicURL","childImageSharp","gatsbyImageData","Template","description","url","PostHead","PostContent","CommentWidget"],"sourceRoot":""}