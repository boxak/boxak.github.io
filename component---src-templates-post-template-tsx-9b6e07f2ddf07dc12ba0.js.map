{"version":3,"file":"component---src-templates-post-template-tsx-9b6e07f2ddf07dc12ba0.js","mappings":"mNA2CA,MA5ByC,WACvC,MAAMA,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,KACR,GAAwB,OAApBF,EAAQG,QAAkB,OAE9B,MAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAsC,CAC1CC,IAtBM,gCAuBNC,KAtBO,wBAuBP,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQC,IAAmB,IAAjBC,EAAKC,GAAM,EAC9Cf,EAAWgB,aAAaF,EAAKC,EAAM,IAGrCnB,EAAQG,QAAQkB,YAAYjB,EAAW,GACtC,KAEIkB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,IAAKvB,GACnB,E,UClCA,MAAMwB,GAAgB,8yBA6FtB,MAJyD,YAAqB,IAAX,KAAEC,GAAM,EACzE,OAAOH,EAAAA,EAAAA,IAACE,EAAgB,CAACE,wBAAyB,CAAEC,OAAQF,IAC9D,E,uCCvFA,MAAMG,GAAmB,oKAUnBC,GAAY,kPAaZC,GAAK,qQAaLC,GAAQ,0KA8Bd,MArB2D,YAIvD,IAJiE,MACnEC,EAAK,KACLC,EAAI,WACJC,GACD,EAGC,OACEZ,EAAAA,EAAAA,IAACM,EAAmB,MAClBN,EAAAA,EAAAA,IAACO,EAAY,CAACM,QAJC,IAAMC,OAAOC,QAAQC,SAKlChB,EAAAA,EAAAA,IAACiB,EAAAA,EAAe,CAACC,KAAMC,EAAAA,QAEzBnB,EAAAA,EAAAA,IAACQ,EAAK,KAAEE,IACRV,EAAAA,EAAAA,IAACS,EAAQ,MACPT,EAAAA,EAAAA,IAAAA,MAAAA,KAAMY,EAAWQ,KAAK,SACtBpB,EAAAA,EAAAA,IAAAA,MAAAA,KAAMW,IAId,EC5DA,MAAMU,GAAe,wGAMfC,GAAkBC,EAAAA,EAAAA,IAAQC,IAC9BxB,EAAAA,EAAAA,IAACyB,EAAAA,GAAW,UAAKD,EAAK,CAAEE,MAAO,CAAEC,SAAU,gBAC5C,qBAFuBJ,CAEtB,sGAsBF,MAdmD,YAK/C,IALyD,MAC3Db,EAAK,KACLC,EAAI,WACJC,EAAU,UACVgB,GACD,EACC,OACE5B,EAAAA,EAAAA,IAACqB,EAAe,MACdrB,EAAAA,EAAAA,IAACsB,EAAe,CAACO,MAAOD,EAAWE,IAAI,eACvC9B,EAAAA,EAAAA,IAAC+B,EAAY,CAACrB,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,IAG1D,ECcA,MAtC2D,SAAU,GAKlE,IAJDoB,MACEC,mBAAmB,MAAEC,IAEvBC,UAAU,KAAEC,IACb,EACC,MACEC,MAAM,KACJlC,EACAmC,aAAa,MACX5B,EAAK,QACL6B,EAAO,KACP5B,EAAI,WACJC,EACAgB,WACEY,WACEC,iBAAiB,gBAAEC,GAAiB,UACpCF,OAKNN,EAAM,GAEV,OACElC,EAAAA,EAAAA,IAAC2C,EAAAA,EAAQ,CAACjC,MAAOA,EAAOkC,YAAaL,EAASM,IAAKT,EAAMP,MAAOW,IAC9DxC,EAAAA,EAAAA,IAAC8C,EAAQ,CACPpC,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZgB,UAAWc,KAEb1C,EAAAA,EAAAA,IAAC+C,EAAW,CAAC5C,KAAMA,KACnBH,EAAAA,EAAAA,IAACgD,EAAa,MAGpB,C","sources":["webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent, createRef, useEffect } from 'react'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'boxak/boxak.github.io'\n\ntype UtteranceAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtteranceAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: 'github-light',\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <div ref={element} />\n}\n\nexport default CommentWidget\n","import styled from '@emotion/styled'\nimport React, { FunctionComponent } from 'react'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Render Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  p {\n    padding: 3px 0;\n  }\n\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 0;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  pre[class*='language'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      background-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import styled from '@emotion/styled'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React, { FunctionComponent } from 'react'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n  color: #ffffff;\n`\n\nconst PrevPageIcon = styled.div`\n  display: grid;\n  place-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #ffffff;\n  color: #000000;\n  font-size: 22px;\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  const goBackPage = () => window.history.back()\n\n  return (\n    <PostHeadInfoWrapper>\n      <PrevPageIcon onClick={goBackPage}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </PrevPageIcon>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport React, { FunctionComponent } from 'react'\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\n\ntype GatsbyImage = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n`\n\nconst BackgroundImage = styled((props: GatsbyImage) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import Template from 'components/Common/Template'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport PostContent from 'components/Post/PostContent'\nimport PostHead from 'components/Post/PostHead'\nimport { graphql } from 'gatsby'\nimport React, { FunctionComponent } from 'react'\nimport { PostPageItemType } from 'types/PostItem.types'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          publicURL: {\n            childImageSharp: { gatsbyImageData },\n            publicURL,\n          },\n        },\n      },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              publicURL {\n                childImageSharp {\n                  gatsbyImageData\n                }\n                publicURL\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","_ref","key","value","setAttribute","appendChild","___EmotionJSX","ref","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","PostHeadInfoWrapper","PrevPageIcon","Title","PostData","title","date","categories","onClick","window","history","back","FontAwesomeIcon","icon","faArrowLeft","join","PostHeadWrapper","BackgroundImage","_styled","props","GatsbyImage","style","position","thumbnail","image","alt","PostHeadInfo","data","allMarkdownRemark","edges","location","href","node","frontmatter","summary","publicURL","childImageSharp","gatsbyImageData","Template","description","url","PostHead","PostContent","CommentWidget"],"sourceRoot":""}